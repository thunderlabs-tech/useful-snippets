{
  // Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "describe": {
    "prefix": "desc",
    "body": ["describe('$1', () => {", "  $0", "});"]
  },
  "it": {
    "prefix": "it",
    "body": ["it('$1', () => {", "  $0", "});"]
  },
  "useContainer()": {
    "prefix": "uc",
    "body": ["const { $0 } = $1.useContainer();"]
  },
  "type predicate": {
    "prefix": "pred",
    "body": [
      "function is$1(value: unknown): value is $2 {",
      "  return $0;",
      "}"
    ]
  },
  "container": {
    "prefix": "con",
    "description": "Create a new React Unstated container",
    "body": [
      "import { createContainer } from \"src/utilities/createContainer\";",
      "",
      "export type $1 = {",
      "};",
      "",
      "export function use$1(",
      "  initial?: {},",
      "): $1 {",
      "  $0",
      "  return {};",
      "}",
      "",
      "const $1Container = createContainer(use$1);",
      "export default $1Container;"
    ]
  },
  "component": {
    "prefix": "com",
    "description": "React component using const syntax",
    "body": [
      "import React from \"react\";",
      "",
      "export type $1Props = {};",
      "",
      "const $1: React.FC<$1Props> = (props) => {",
      "  $0",
      "};",
      "",
      "export default $1;"
    ]
  },
  "function component": {
    "prefix": "fcom",
    "description": "React component using function syntax",
    "body": [
      "import React, { PropsWithChildren, ReactElement } from \"react\";",
      "",
      "export type $1Props = {};",
      "",
      "function $1(props: PropsWithChildren<$1Props>): ReactElement | null {",
      "  $0",
      "};",
      "",
      "export default $1;"
    ]
  },
  "import css": {
    "prefix": "importcss",
    "description": "Import CSS module",
    "body": ["import css from \"./$TM_FILENAME_BASE.module.css\";"]
  },
  "useState()": {
    "prefix": "us",
    "body": "const [$1, set$2] = useState($3);"
  },
  "useCallback()": {
    "prefix": "ucall",
    "body": "useCallback(() => { $0 }, []);"
  },
  "page": {
    "prefix": "page",
    "body": [
      "import React from \"react\";",
      "import { IonContent, IonHeader, IonPage } from \"@ionic/react\";",
      "import { useScreenTracking } from \"src/firebase/useScreenTracking\";",
      "",
      "export type $1PageProps = {};",
      "",
      "const $1Page: React.FC<$1PageProps> = (",
      "props,",
      ") => {",
      "  useScreenTracking(\"$1Page\", undefined);",
      "",
      "  return (",
      "    <IonPage data-cy=\"$1Page\">",
      "      <IonHeader></IonHeader>",
      "      <IonContent>$0</IonContent>",
      "    </IonPage>",
      "  );",
      "};",
      "",
      "export default $1Page;"
    ]
  },
  "service": {
    "prefix": "service",
    "body": [
      "export type I$1 = {",
      "  $0",
      "};",
      "",
      "export class $1 implements I$1 {",
      "}"
    ]
  },
  "use i18n container": {
    "prefix": "i18n",
    "body": "const i18n = I18nContainer.useContainer();"
  },
  "defcon": {
    "description": "define context",
    "prefix": "defcon",
    "body": [
      "import React from \"react\";",
      "import { EMPTY } from \"src/utilities/createContainer\";",
      "",
      "export type ${1:$TM_FILENAME_BASE}ContextValue = {",
      "  // Context props$0",
      "};",
      "",
      "const ${1:$TM_FILENAME_BASE}Context = React.createContext<",
      "  ${1:$TM_FILENAME_BASE}ContextValue | typeof EMPTY",
      ">(EMPTY);",
      "",
      "export function use${1:$TM_FILENAME_BASE}Context(): ${1:$TM_FILENAME_BASE}ContextValue {",
      "  const value = React.useContext(${1:$TM_FILENAME_BASE}Context);",
      "  if (value === EMPTY) {",
      "    throw new Error(\"Component must be wrapped with <${1:$TM_FILENAME_BASE}ContextProvider>\");",
      "  }",
      "  return value;",
      "}",
      "",
      "const ${1:$TM_FILENAME_BASE}ContextProvider: React.FC<{",
      "  context: ${1:$TM_FILENAME_BASE}ContextValue;",
      "}> = ({ children, context }) => {",
      "  return (",
      "    <${1:$TM_FILENAME_BASE}Context.Provider value={context}>",
      "      {children}",
      "    </${1:$TM_FILENAME_BASE}Context.Provider>",
      "  );",
      "};",
      "",
      "export default ${1:$TM_FILENAME_BASE}ContextProvider;",
      ""
    ]
  },
  "import firebase": {
    "prefix": "imfb",
    "description": "import firebase from \"firebase/app\"",
    "body": "import firebase from \"firebase/app\""
  },
  "import firebase-admin": {
    "prefix": "imfba",
    "description": "import firebaseAdmin from \"firebase-admin\"",
    "body": "import firebaseAdmin from \"firebase-admin\""
  }
}
